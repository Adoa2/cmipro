
# Archivo: backend/test_db_connection.py
# Script para probar conexi√≥n a PostgreSQL RDS

import os
import sys
from pathlib import Path
import psycopg2
from dotenv import load_dotenv

# Cargar variables de entorno
env_file = Path(__file__).parent / ".env.local"
load_dotenv(env_file)

def test_direct_connection():
    """Probar conexi√≥n directa a PostgreSQL"""
    
    print("üîÑ Probando conexi√≥n directa a PostgreSQL RDS...")
    
    # Obtener variables de entorno
    database_url = os.getenv("DATABASE_URL")
    
    if not database_url:
        print("‚ùå Error: DATABASE_URL no configurada en .env.local")
        return False
    
    try:
        # Extraer componentes de la URL
        # Format: postgresql://user:password@host:port/database
        url_parts = database_url.replace("postgresql://", "").split("/")
        db_name = url_parts[1]
        
        user_pass_host = url_parts[0].split("@")
        host_port = user_pass_host[1].split(":")
        host = host_port[0]
        port = int(host_port[1])
        
        user_pass = user_pass_host[0].split(":")
        user = user_pass[0]
        password = user_pass[1]
        
        print(f"üìç Host: {host}:{port}")
        print(f"üë§ Usuario: {user}")
        print(f"üóÑÔ∏è Base de datos: {db_name}")
        
        # Intentar conexi√≥n
        connection = psycopg2.connect(
            host=host,
            port=port,
            database=db_name,
            user=user,
            password=password,
            connect_timeout=10
        )
        
        cursor = connection.cursor()
        
        # Probar queries b√°sicas
        print("\nüß™ Ejecutando pruebas...")
        
        # 1. Versi√≥n de PostgreSQL
        cursor.execute("SELECT version();")
        version = cursor.fetchone()[0]
        print(f"‚úÖ PostgreSQL: {version.split(',')[0]}")
        
        # 2. Verificar tablas
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
            ORDER BY table_name;
        """)
        tables = cursor.fetchall()
        table_names = [table[0] for table in tables]
        print(f"‚úÖ Tablas encontradas: {table_names}")
        
        # 3. Verificar funci√≥n de riesgo
        try:
            cursor.execute("SELECT calculate_risk_level(5.0, 'CHIH3');")
            risk_result = cursor.fetchone()[0]
            print(f"‚úÖ Funci√≥n calculate_risk_level: {risk_result}")
        except Exception as e:
            print(f"‚ö†Ô∏è Funci√≥n calculate_risk_level no disponible: {e}")
        
        # 4. Contar registros en tablas principales
        for table in ["stations", "hydrologic_readings"]:
            if table in table_names:
                cursor.execute(f"SELECT COUNT(*) FROM {table};")
                count = cursor.fetchone()[0]
                print(f"‚úÖ {table}: {count} registros")
        
        cursor.close()
        connection.close()
        
        print("\nüéâ ¬°Conexi√≥n exitosa a PostgreSQL RDS!")
        return True
        
    except psycopg2.OperationalError as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        print("\nüîß Posibles soluciones:")
        print("   1. Verificar que el Security Group permite acceso desde tu IP")
        print("   2. Confirmar que las credenciales en .env.local son correctas")
        print("   3. Verificar conectividad de red")
        return False
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

def test_sqlalchemy_connection():
    """Probar conexi√≥n usando SQLAlchemy (como lo hace FastAPI)"""
    
    print("\nüîÑ Probando conexi√≥n SQLAlchemy...")
    
    try:
        # Importar y probar configuraci√≥n de FastAPI
        sys.path.insert(0, str(Path(__file__).parent / "app"))
        
        from config.database import test_connection, check_tables
        
        # Probar conexi√≥n
        if test_connection():
            print("‚úÖ Conexi√≥n SQLAlchemy exitosa")
            
            # Verificar tablas
            tables_info = check_tables()
            print(f"‚úÖ Informaci√≥n de tablas: {tables_info}")
            
            return True
        else:
            print("‚ùå Error en conexi√≥n SQLAlchemy")
            return False
            
    except ImportError as e:
        print(f"‚ö†Ô∏è No se pudo importar m√≥dulos FastAPI: {e}")
        print("   Aseg√∫rate de haber instalado todas las dependencias")
        return False
    except Exception as e:
        print(f"‚ùå Error en SQLAlchemy: {e}")
        return False

def main():
    """Funci√≥n principal"""
    
    print("üß™ CMIPRO - Prueba de Conexi√≥n a Base de Datos")
    print("=" * 60)
    
    # Verificar archivo de entorno
    if not env_file.exists():
        print("‚ùå Error: archivo .env.local no encontrado")
        print(f"   Crear archivo en: {env_file}")
        return
    
    print(f"‚úÖ Variables de entorno cargadas desde: {env_file}")
    
    # Ejecutar pruebas
    success1 = test_direct_connection()
    success2 = test_sqlalchemy_connection()
    
    print("\n" + "=" * 60)
    if success1 and success2:
        print("üéâ ¬°Todas las pruebas exitosas! La base de datos est√° lista.")
        print("‚úÖ Puedes ejecutar FastAPI con: python run_local.py")
    else:
        print("‚ùå Algunas pruebas fallaron. Revisar configuraci√≥n.")
    
    print("=" * 60)

if __name__ == "__main__":
    main()